================================
-------------Queue--------------
================================

Public Abstract Class Queue:
Notes: 
-All methods have to two parts. They have the change both the visual queue (html) and the internal data structures.

*****Data Members*****
Songs[] - Array of Song objects

*****Buttons/Methods*****
Save as Playlist()

Load Playlist()

Clear() - Removes all songs from both visual playlist and array

Shuffle() - Randomly orders songs in both html and array

Add(int index) - Appends the song at index in the rankings to the bottom of the queue

Insert(int Song, int Index):
-Insert song (specified by # in rankings) into the queue at index i. 
-Every song, starting with and including the current song at index, is shifted one position down.

Remove(Index) - Removes the song at Index. Every song after is shifted up

Play(Index):
-Plays the song at index IN THE QUEUE. 
-The method to play a song in the rankings should call Generated-Queue's overloaded version. 
-Calling this method will load all the song's information from Song[index] into the player hub and start playing the youtube video

Promote(i) - Promotes the song in the queue at i up one position, swapping places with i-1

Demote(i) - Demotes the song in the queue at i down one position, swamping places with i+1
--------------------------------------------------------------------

Public UserQueue Extends Queue
Notes:
-Songs Manually Added by User
-No method implementation should have to be changed from Queue

--------------------------------------------------------------------

Public  GeneratedQueue Extends Queue
Notes:
-References to songs in rankings
-Changes everytime the rankings change
-Shouldn't need an internal datastructure of Songs because any song in the GeneratedQueue can pull its information from the current rankings

*****Buttons/Methods*****
addAll() - Adds all the song's from the generated queue to the userqueue

